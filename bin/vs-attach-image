#!/usr/bin/env ruby
require 'optparse'
require 'date'
require 'yaml'
require 'vstool'

PrefFile = "~/.vs2007rc"

# try to read config file
# base_path = "C:\\VS2007data"
base_path = "Z:\\"
begin
  myconfigs      = YAML.load(File.read(File.expand_path(PrefFile)))
  base_path = myconfigs['vsdata_path']
 rescue
  puts "In #{File.basename(__FILE__)}: I will make a new config file <#{PrefFile}>."
  myconfigs		= {'vsdata_path' => base_path, 'world_origin' => "ld", 'stage_origin' => "ru"}
  open(File.expand_path(PrefFile), "w") do |f|
  	YAML.dump(myconfigs, f)
  end
end

params = {attach_crop: false, dry_run: false}
options = OptionParser.new do |opts|
  script_name = File.basename($0)
  opts.on("-n", "--dry-run", "Only create an imageometry for an image and no interaction with Visual Stage 2007 would be made.") do |v|
    params[:dry_run] = v
  end
  opts.on("--attach-crop", "Attach cropped image to Visual Stage 2007.") do |v|
    params[:attach_crop] = v
  end

  opts.banner = <<"EOS"
NAME
  #{File.basename($0, '.*')} - Copy image to VisualStage 2007

SYNOPSIS
  #{script_name} [options] imagefile [imagefile2,...]

DESCRIPTION
  Copy image to VisualStage 2007.  You need to have a pair of image
  file and image-info file.  The image-info file is created by JEOL
  JSM-7001F or JSM-8530F and is also referred as imajeoletry file.
  Three processes are involved.  Image format of PNG, JPG, BMP, and
  TIF are supported.  Accept multiple IMAGEFILE.  Use `loop-vs-attach-image'
  to attach images automatically in a certain directory.  It is also
  useful to write Makefile.

  1. Creation of image-info file in world coordinate

     From image-info file in device coordinate (imajeoletry) and
     Affine matrix in VS session, image-info file in world coordinate
     (imageometry) should be created.  The affine matrix in VS session
     can be monitored by `vs-get-affine'.

  2. Crop and spin the image

     On import, VisualStage 2007 1.1 accepts coordinate, width, and
     height but rotation as image properties.  Unless image is rotated
     in advance, spin info is discarded on import.  Thus an image
     will be cropped, spinned, and stored in deleteme.d/@crop and
     deleteme.d/@crop@spin, respectively.  You have additional four
     files (two images and two imageometry files).

  3. Attach three images to VS

     The three images are attached to VS according to image-info file
     in world coordinate (imageometry files).  The operation is
     carried out by `vs-add-file'.

EXAMPLE
  $ dir
  tt_grt_bcg12@39.jpg  tt_grt_bcg12@39.txt
  $ #{script_name} IMG_0821.JPG
  ...
  $ ls -lR
  tt_grt_bcg12@39.jpg
  tt_grt_bcg12@39.txt
  tt_grt_bcg12@39.geo
  deleteme.d/@crop/tt_grt_bcg12@39.jpg
  deleteme.d/@crop/tt_grt_bcg12@39.txt
  deleteme.d/@crop@spin/tt_grt_bcg12@39.jpg
  deleteme.d/@crop@spin/tt_grt_bcg12@39.txt
  
  cmd> #{script_name} --dry-run *.bmp

SEE ALSO
  loop-vs-attach-image
  vs-add-file
  vs-get-affine
  https://gitlab.misasa.okayama-u.ac.jp/gems/vstool
  https://gitlab.misasa.okayama-u.ac.jp/gems/vstool/blob/master/bin/#{script_name}

IMPLEMENTATION
  Copyright (c) 2015-2020 ISEI, Okayama University
  Licensed under the same terms as Ruby

HISTORY
  March 18, 2020: Support raster rotation.
  February 5, 2020: Implement option `--attach-crop'.
  October 31, 2019: Support extention `.geo'.
  October 18, 2019: Implement option `--dry-run'.
  May 21, 2015: Add documentation.

OPTIONS
EOS
end
options.parse!

params = params.merge({:sample_name => "image2sem", :base_path => base_path})
params[:stage_origin] = myconfigs['stage_origin'] || "ru"
params[:world_origin] = myconfigs['world_origin'] || "ld"
app = Vstool::Image2vs.new(params,ARGV)
app.start
